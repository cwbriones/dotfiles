"vim: set syntax=vim:
"======================================================================
" Plugins managed by vim-plug
"======================================================================
call plug#begin('~/.vim/bundle')

" General Niceities
Plug 'Yggdroot/indentLine'
Plug 'godlygeek/tabular'
Plug 'scrooloose/nerdtree'
Plug 'simnalamburt/vim-mundo'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive', {'tag' : 'v2.3'}
Plug 'vim-airline/vim-airline', {'commit' : '3abbfabf55'}
Plug 'w0rp/ale'

" Language support
Plug 'fatih/vim-go', {'tag': 'v1.19'}
Plug 'leafgarland/typescript-vim'
Plug 'rust-lang/rust.vim'
Plug 'vim-python/python-syntax'
Plug 'cespare/vim-toml'

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" -----------------------------------------------------------------------------------------------------
" Plug 'elixir-lang/vim-elixir'
" Plug 'slashmili/alchemist.vim'
" Plug 'ElmCast/elm-vim'
" Plug 'eagletmt/ghcmod-vim'
" Plug 'eagletmt/neco-ghc'
" Plug 'tpope/vim-abolish'
" Plug 'vim-erlang/vim-erlang-compiler'
" Plug 'vim-erlang/vim-erlang-omnicomplete'

" Colorschemes
Plug 'chriskempson/base16-vim'
Plug 'mkarmona/colorsbox'
Plug 'morhetz/gruvbox'

" Completion
if has('nvim')
    Plug 'Shougo/deoplete.nvim', {'do' : ':UpdateRemotePlugins'}
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'davidhalter/jedi-vim'
Plug 'zchee/deoplete-jedi'
Plug 'racer-rust/vim-racer'
Plug 'zchee/deoplete-go', {'do': 'make'}
Plug 'mhartington/nvim-typescript', {'do': './install.sh'}
call plug#end()

" FIXME: Install this and possibly add to vim/install.sh
" let g:python3_host_prog = expand('~/.nvim-venv/bin/python') " Python 3

" This implicitly enables syntax and filetype
" filetype plugin indent on

" Load on nothing
let g:deoplete#enable_at_startup = 1

" let g:deoplete#sources#rust#disable_keymap=1
" FIXME: What is this?
let g:racer_experimental_compiler=1

" Python
let python_highlight_all = 1

let g:deoplete#sources#jedi#show_docstring = 1
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = "<leader>gd"
let g:jedi#goto_assignments_command = ""
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>fu"
let g:jedi#completions_command = ""
let g:jedi#rename_command = "<leader>r"

" Golang
let g:deoplete#sources#go#gocode_binary=$GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
nnoremap <leader>r :GoRename<cr>

" Ctrl-Space: summon FULL (synced) autocompletion
inoremap <silent><expr> <C-Space> deoplete#mappings#manual_complete()
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

au FileType rust nmap <leader>gd <Plug>(rust-def)
au FileType rust nmap <leader>K <Plug>(rust-doc)

au FileType typescript nmap K :TSDoc<Enter>
au FileType typescript nmap <leader>gd :TSDef<Enter>
au FileType typescript nmap <leader>fu :TSRefs<Enter>
"
au BufRead,BufNewFile *.vue set filetype=html
au BufRead,BufNewFile *.svelte set filetype=html

let g:go_fmt_command = "gofmt"

"======================================================================
" Primary Settings
"======================================================================

" Temporary flag to enable mouse
" See https://github.com/neovim/neovim/issues/6082
set mouse=a

" Limit syntax highlighting
set synmaxcol=150
let g:matchparen_timeout = 2
let g:matchparen_insert_timeout = 2

set encoding=utf-8
set fileformat=unix
set hidden

" Basic Appearance
set nowrap
set ruler
set number
set bg=dark
set splitright
set splitbelow
set title
set cursorline
set laststatus=2
set foldenable
set foldlevel=99
set foldmethod=syntax

set completeopt=menuone,preview
let pumheight=15

" Global tab and indentation settings
set listchars="eol:$,tab:»"
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smarttab
set smartindent
let g:indentLine_char='┊'
let g:indentLine_enabled=0
let g:indentLine_setColors=0

" Allow backspaces in insert mode
set backspace=indent,eol,start

" Search settings
set incsearch
set hlsearch
set smartcase
set ignorecase
" Remember lots
set history=1000
set undolevels=1000

" I have git for this.
set nobackup
set noswapfile

set wildignore+=*.swp,*.back,*.pyc,*.class,*.beam
" don't beep
set visualbell
set noerrorbells

"======================================================================
" Appearance
"======================================================================

if $DARK_MODE
    let fullcolor_colorscheme="base16-solarized-dark"
else
    let fullcolor_colorscheme="base16-solarized-light"
endif

if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif
if has("nvim") && $TERM == 'xterm-256color'
  set termguicolors
endif
if has("gui_running")
    set lines=60
    set columns=100

    if has("win32")
        set guifont=Consolas:h11
    elseif has("Mac")
        set guifont=Inconsolata\ for\ Powerline:h18
        set macligatures
    else
        set guifont=Inconsolata\ for\ Powerline\ 12
    endif
    execute "colorscheme ".fullcolor_colorscheme
    set guioptions=aegimrLtT "Put gvim into fullscreen"
    map <silent> <F11> :call ToggleFullScreen()<CR>
elseif has("nvim")
    execute "colorscheme ".fullcolor_colorscheme
else
    colorscheme solarized
endif

" Visual indicator of extraneous whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
command! Clean execute "%s/\\s\\+$//g"

"======================================================================
" Function Definitions
"======================================================================

function! ToggleGuidelines()
    if &colorcolumn == 101
        set colorcolumn=0
        execute ':IndentLinesDisable'
    else
        set colorcolumn=101
        execute ':IndentLinesEnable'
    endif
endfunction

" For easy editing of plain text
command! -nargs=* Plain set wrap linebreak nolist showbreak=…
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^

autocmd Filetype python setlocal fo+=r

" ===================================================================
" Key Mappings
" ===================================================================

let mapleader = ","
map  <leader>td <Plug>TaskList
nmap <leader>a: :Tabularize /:<CR>
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a: :Tabularize /:<CR>
vmap <leader>a= :Tabularize /=<CR>
vmap <leader>a; :Tabularize /::<CR>
vmap <leader>a- :Tabularize /-><CR>
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nnoremap <leader>w <C-w>v<C-w>l

" FZF
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   <bang>0 ? 'rg --column --line-number --no-heading --color=always --smart-case '.<q-args>
  \           : 'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview('right:50%:hidden', '?'),
  \   0)
nnoremap <C-p> :Files<CR>
noremap \ :Rg 
noremap \\ :Rg! 

" <F1> is mapped to vim help by the OS
noremap <F2> :lope<CR>
noremap <F3> :NERDTreeToggle<CR>

" Clear recent search
noremap <F5> :set hlsearch!<CR>
noremap <F6> :call ToggleGuidelines()<CR>
noremap <F7> :MundoToggle<CR>
inoremap jj <ESC>

noremap <leader>y "*y
noremap <leader>p "*p
noremap <leader>Y "+y
noremap <leader>P "+p

noremap <leader>fi :lope<CR>
noremap <leader>cc :set cursorline!<CR>
noremap <leader>qf :cope<CR>
noremap <leader>x :Explore<CR>

" See https://vim.fandom.com/wiki/Moving_lines_up_or_down#Mappings_to_move_lines
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv<Paste>

" ===================================================================
" Plugin Settings
" ===================================================================

" NERDTree
let NERDTreeIgnore = ['\.pyc$']
" Automatically open NERDTree if no files specified
" autocmd vimenter * if !argc() | NERDTree | endif
let g:erlang_folding=1

" Airline
if !exists("g:airline_symbols")
    let g:airline_symbols = {}
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.linenr = ''
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.whitespace = 'Ξ'
endif

" There's currently a bug in airline that doesn't play well with fugitive
" when both are enabled, and I'd much rather have diff still around.
if has("nvim")
    let g:airline#extensions#branch#enabled = 0
endif

let g:python_host_skip_check=1

" Ale Error Checker
let g:ale_sign_error = '!!'
let g:ale_sign_warning = '>>'
let g:ale_lint_on_enter = 0
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_lint_on_text_changed = 'never'
let airline#extensions#ale#error_symbol = '⨉ '
let airline#extensions#ale#warning_symbol = '⚠ '
let g:airline#extensions#ale#enabled = 1

" Load bindings that aren't synced to .dotfiles (e.g. work config)
let local_vimrc = expand('~/.localvimrc')

if filereadable(local_vimrc)
    exe 'source' local_vimrc
endif
